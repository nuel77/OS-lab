/// EXCEPTION HANDLER
breakpoint;
// switch to exception mode
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = -1;
// switch to kernel stack
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 -1;
backup;
multipush(EIP);

alias userSP R0;
userSP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];

// other exceptions
if (EC != 0 || userSP == PTLR*512-1) then
    print "Exception!";
    if (EC == 1) then
        print "Illegal instruction";
    endif;
    if (EC == 2) then
        print "Illegal memory access";
    endif;
    if (EC == 3) then
        print "Arithmetic Exception";
    endif;
    if (userSP == PTLR*512-1) then
        print "Stack full";
    endif;
    
    // call EXIT PROCESS
    multipush(R0);
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;
    multipop(R0);
    
    // Check for non-terminated processes in the process table
    alias counter R3;
    alias newPID R4;
    counter=0;
    newPID=[SYSTEM_STATUS_TABLE+1]+1;
    while(counter<=15) do
        if((newPID != 0) && ([PROCESS_TABLE + (newPID*16) +4] != TERMINATED)) then
            break;
        endif;
        newPID = (newPID + 1)%16;
        counter = counter + 1;
    endwhile;
    
    // If all processes (except IDLE) are terminated, then halt the machine
    // Else call the scheduler
    if(counter == 16) then
        print "No processes";
        print "Halting";
        halt;
    else
        print "CallScheduler";
        call MOD_5;
    endif;
endif;

// page fault exception
// for code page
if (EPN == 4 || EPN == 5 || EPN == 6 || EPN == 7) then
    multipush(R0,R1,R2);
    alias functionNum R1;
    alias blockNum R2;
    // get code page
    functionNum = 5;
    blockNum = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + EPN];
    call MOD_2;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2] = R0;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2 + 1] = "1100";
    multipop(R0,R1,R2);
endif;
// for heap page
if (EPN == 2 || EPN == 3) then
    // get free page
    multipush(R0,R1,R2);
    alias functionNum R1;
    functionNum = 1;
    call MOD_2;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2] = R0;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2 + 1] = "1110";
    multipop(R0,R1,R2);
endif;

multipop(EIP);
restore;

// switch back to user mode
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;

// back to user stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
SP = SP+1;
[[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2*SP/512]*512 + SP%512] = EIP;
ireturn;
