///Read Interrupt///

// MODE FLAG of current proccess table = 7 for read
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] = 7;

//save the user stack address
alias userSP R0;
userSP = SP;

//user stack address saved to UPTR
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13] = SP;

// kernel stack = (userPageNumber)*512-1
SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11]*512 - 1;

//Get file descriptor argument (from userSP-4) (manual address translation)
alias fileDescriptor R1;
fileDescriptor = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];

//address to store return value
alias retValAddr R2;
//get the address to store return value (userSP-1) (manual address translation)
retValAddr = [PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512;

//If the file descriptor is not -1
//Store -1 as the return value in the user stack (at position userSP-1).
if (fileDescriptor != -1) then
    [retValAddr] = -1;
else
    // Word Address
    alias wordAddress R3;
    //get the address to store the console input (userSP-3) (manual address translation)
    wordAddress = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
    multipush(R0,R1,R2,R3);

    R1 = 4;                             // function number of the Terminal Read
    R2 = [SYSTEM_STATUS_TABLE + 1];     // PID of the current process
    R3 = wordAddress;                   // word address
    call MOD_4;                         // Call Device Manager
    
    multipop(R0,R1,R2,R3);
    [retValAddr] = 0;
endif;

//change SP from kernel to user
SP = userSP;

//reset MODE flag to 0 userMode
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;
