breakpoint;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16)+13]=SP; //store current sp in uptr field.
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512-1; //store begining of kernel stack to sp.
backup; //backup all registers to kernel stack of current process.

alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1]; //get the pid of currently running process.

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16; //get the process table from pid.

[process_table_entry + 12] = SP % 512; //store offset of kernel stack location
[process_table_entry + 14] = PTBR; //default
[process_table_entry + 15] = PTLR;	//default

[process_table_entry + 4] = READY; //change from running to ready

//toggle between idle (pid=0) and init (pid=1) processes.
alias newPID R2;
if(currentPID == 0) then
	newPID = 1;
else
	newPID = 0;
endif;

alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ; //get kernel stack of new process.
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;

//if the process is just created we need to set the sp directly as it not already backed up
if([new_process_table + 4] == CREATED) then
	[new_process_table + 4] = RUNNING;
	SP = [new_process_table + 13]; //switch user stack pointer
	ireturn;
endif;

[new_process_table + 4] = RUNNING;

print "TIMER INT";
print "PID SWITCH";
print currentPID;

restore;

SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13];
breakpoint;
ireturn;