///// BOOT MODULE /////

// Load the INIT program from the disk to the memory.
loadi(65,7);
loadi(66,8);

// Load inode+user table
loadi(59,3);
loadi(60,4);

// Load Disk Free List
loadi(61,2);

// Load interrupt handlers

// INT 4
loadi(10,23);
loadi(11,24);

// INT 6
loadi(14,27);
loadi(15,28);

// INT 7
loadi(16,29);
loadi(17,30);

// INT 8
loadi(18,31);
loadi(19,32);

// INT 9
loadi(20,33);
loadi(21,34);

// INT 10
loadi(22,35);
loadi(23,36);

// INT 11
loadi(24,37);
loadi(25,38);

// INT 13
loadi(28,41);
loadi(29,42);

// INT 14
loadi(30,43);
loadi(31,44);

// INT 15
loadi(32,45);
loadi(33,46);

// INT Timer
loadi(4, 17);
loadi(5, 18);

// INT Disk
loadi(6, 19);
loadi(7, 20);

// INT Console
loadi(8,21);
loadi(9,22);

// Load the exception handler routine from the disk to the memory.
loadi(2, 15);
loadi(3, 16);

// Load libraries from the disk to the memory.
loadi(63,13);
loadi(64,14);

// Load Modules
// Module 0 - Resource manager
loadi(40,53);
loadi(41,54);

// Module 1 - Process manager
loadi(42,55);
loadi(43,56);

// Module 2 - Memory manager
loadi(44,57);
loadi(45,58);

// Module 4 - Device Manager
loadi(48,61);
loadi(49,62);

// Module 5 - Scheduler
loadi(50,63);
loadi(51,64);

/////////////// INIT PROCESS SETUP ///////////////


// Page table setup 
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//LIBRARY
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//HEAP
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//CODE
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//STACK
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// Process table setup
// User Area page 
[PROCESS_TABLE + 16 + 11] = 80;

// PID 
[PROCESS_TABLE + 16 + 1] = 1;

// USERID
[PROCESS_TABLE + 16 + 3] = 1;

// STATE 
[PROCESS_TABLE + 16 + 4] = CREATED;

// PTBR 
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20 ;

// PTLR 
[PROCESS_TABLE + 16 + 15] = 10;

// KPTR
[PROCESS_TABLE + 16 + 12] = 0;

// UPTR
[PROCESS_TABLE + 16 + 13] = 8*512;

// Storing entry point of program to stack top
[76*512] = [65*512 + 1];

// Per-process resource table setup for INIT process
// in the last 16 words of user area page
alias i R1;
i = 1;
while (i < 16) do
    [[PROCESS_TABLE + 16 + 11]*512 + (512 - 1) + (i - 16)] = -1;
    i = i + 2;
endwhile;

// Initialize disk map table for INIT process
// heap
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 2] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 3] = -1;
// code
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 4] = 7;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 5] = 8;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 6] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 7] = -1;
// stack
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 8] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 9] = -1;


///// INITIALIZATION /////


// Setting STATE field of all other processes as TERMINATED
alias state_field R0;
state_field = PROCESS_TABLE + 4 ;
i = 2;
while((state_field+i*16) < (PROCESS_TABLE + 16*16)) do
    if (([state_field+i*16]!=CREATED) && ([state_field+i*16]!=RUNNING) && ([state_field+i*16]!=READY)) then
        [state_field+i*16]=TERMINATED;
    endif;
    i=i+1;
endwhile;

// Setting STATUS field in terminal status table to 0 (indicating terminal free for first process)
[TERMINAL_STATUS_TABLE] = 0;

// Setting STATUS field in disk status table to 0 (indicating disk free for first process)
[DISK_STATUS_TABLE] = 0;

//Initializing file status table
i=0;
while(i<60) do
	[FILE_STATUS_TABLE+i*4+0]=-1;
	[FILE_STATUS_TABLE+i*4+1]=-1;
	i=i+1;
endwhile;

//Initializing buffer table
i=0;
while(i<4) do
	[BUFFER_TABLE+i*4+0]=-1;
	[BUFFER_TABLE+i*4+1]=0;
	[BUFFER_TABLE+i*4+2]=-1;
	i=i+1;
endwhile;



// Initialize semaphore table
i = 0;
while (i<32) do
    // Locking PID
    [SEMAPHORE_TABLE + i*4 + 0] = -1;
    // Process count
    [SEMAPHORE_TABLE + i*4 + 1] = 0;
    i = i+1;
endwhile;

// pages 0-82 are in use
// pages 83-127 are free
i = 0;
while(i < 83) do
	[MEMORY_FREE_LIST + i] = 1;
	i = i + 1;
endwhile;
while(i < 128) do
	[MEMORY_FREE_LIST + i] = 0;
	i = i + 1;
endwhile;

// memory free count
[SYSTEM_STATUS_TABLE + 2] = 45;

// WAIT_MEM count
[SYSTEM_STATUS_TABLE + 3] = 0;





// Return to OS startup code
return;
