// INIT Program
loadi(65,7);
loadi(66,8);

//User Program even
loadi(83,69);

//user program prime
loadi(90,70);

// INT10
loadi(22,35);
loadi(23,36);

// INT7
loadi(16,29);
loadi(17,30);

//INT6
loadi(14,27);
loadi(15,28);

//Console interrupt Handler
loadi(8,21);
loadi(9,22);

// Exception Handler
loadi(2, 15);
loadi(3, 16);

// MODULE 0
loadi(40,53);
loadi(41,54);

// MODULE 4
loadi(48,61);
loadi(49,62);

// MODULE 5
loadi(50,63);
loadi(51,64);

// Library Code
loadi(63,13);
loadi(64,14);

// Timer Interrupt
loadi(4, 17);
loadi(5, 18);

// PAGE TABLE FOR INIT
PTBR = PAGE_TABLE_BASE+20;  // 0-19 reserved by idle process
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// PAGE TABLE FOR User Program(even)

PTBR = PAGE_TABLE_BASE+40;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 84;
[PTBR+5] = "0110";
[PTBR+6] = 85;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 83;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 86;
[PTBR+17] = "0110";
[PTBR+18] = 87;
[PTBR+19] = "0110";

//// PAGE TABLE FOR User Program(prime)

PTBR = PAGE_TABLE_BASE+60;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 91;
[PTBR+5] = "0110";
[PTBR+6] = 92;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 90;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 93;
[PTBR+17] = "0110";
[PTBR+18] = 94;
[PTBR+19] = "0110";

// PROCESS TABLE FOR INIT

[PROCESS_TABLE+16 + 11] = 80; //user area page number
[PROCESS_TABLE+16 + 1] = 1;     //pid
[PROCESS_TABLE+16 + 4] = CREATED;   //status
[PROCESS_TABLE+16 + 13] = 8*512;    //user stack pointer    (logical)
[PROCESS_TABLE+16 + 12] = 0;    //kernel stack pointer  
[PROCESS_TABLE+16 + 14] = PAGE_TABLE_BASE+20;   //ptbr (per process page table)
[PROCESS_TABLE+16 + 15] = 10;   //page table length

// PROCESS TABLE FOR User even program

[PROCESS_TABLE+(2*16) + 11] = 88; //user area page number
[PROCESS_TABLE+(2*16) + 1] = 2;     //pid
[PROCESS_TABLE+(2*16) + 4] = CREATED;   //status
[PROCESS_TABLE+(2*16) + 13] = 8*512;     //user stack pointer    (logical)
[PROCESS_TABLE+(2*16) + 12] = 0;     //kernel stack pointer  
[PROCESS_TABLE+(2*16) + 14] = PAGE_TABLE_BASE+40;   //ptbr (per process page table)
[PROCESS_TABLE+(2*16) + 15] = 10;   //page table length

// PROCESS TABLE FOR User prime Program

[PROCESS_TABLE+(3*16) + 11] = 95; //user area page number
[PROCESS_TABLE+(3*16) + 1] = 3;     //pid
[PROCESS_TABLE+(3*16) + 4] = CREATED;   //status
[PROCESS_TABLE+(3*16) + 13] = 8*512;     //user stack pointer (logical)
[PROCESS_TABLE+(3*16) + 12] = 0;     //kernel stack pointer  
[PROCESS_TABLE+(3*16) + 14] = PAGE_TABLE_BASE+60;   //ptbr (per process page table)
[PROCESS_TABLE+(3*16) + 15] = 10;   //page table length

//set all other proceses with "terminated" status
alias counter R0;
counter = 2;
while(counter <= 15) do
  [PROCESS_TABLE + (counter * 16) + 4] = TERMINATED;
  counter = counter + 1;
endwhile; 


[76*512] = [65 * 512 + 1];  //entry point for init program.
[86*512] = [83 * 512 + 1];  //entry point for user program. 
[93*512] = [90 * 512 + 1]; //entry for prime program.

[TERMINAL_STATUS_TABLE + 0] = 0;


return;