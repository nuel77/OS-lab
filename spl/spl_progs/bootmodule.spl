//INIT Program
loadi(65,7);
loadi(66,8);

//INODE + USER TABLE
loadi(59,3);
loadi(60,4);

//DISK FREE LIST
loadi(61,2);

//INT6
loadi(14,27);
loadi(15,28);

//INT7
loadi(16,29);
loadi(17,30);

//INT 9
loadi(20,33);
loadi(21,34);

// INT10
loadi(22,35);
loadi(23,36);

//INT Timer
loadi(4, 17);
loadi(5, 18);

// INT Disk
loadi(6, 19);
loadi(7, 20);

//Console interrupt Handler
loadi(8,21);
loadi(9,22);

//Exception Handler
loadi(2, 15);
loadi(3, 16);

//MODULE 0 - Resouce Manager
loadi(40,53);
loadi(41,54);

// Module 1 - Process manager
loadi(42,55);
loadi(43,56);

// Module 2 - Memory manager
loadi(44,57);
loadi(45,58);

// MODULE 4 - Device Manager
loadi(48,61);
loadi(49,62);

// MODULE 5 - Scheduler
loadi(50,63);
loadi(51,64);

//Library Code
loadi(63,13);
loadi(64,14);


/// INIT PROCESS ///


// PAGE TABLE FOR INIT
PTBR = PAGE_TABLE_BASE+20;  // 0-19 reserved by idle process
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//Process Table for Init process

//User Area page 
[PROCESS_TABLE + 16 + 11] = 80; //free random page

// PID of init is 1
[PROCESS_TABLE + 16 + 1] = 1;

// STATE 
[PROCESS_TABLE + 16 + 4] = CREATED;

// PTBR 
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 1*20 ; //index of 1st process

// PTLR 
[PROCESS_TABLE + 16 + 15] = 10; //constant

// KPTR
[PROCESS_TABLE + 16 + 12] = 0;

// UPTR
[PROCESS_TABLE + 16 + 13] = 8*512;

// Storing entry point of program to stack top
[76*512] = [65*512 + 1]; //stack top address of init process= 2nd line of code file (entry point)

//resource table setup for INIT process in the last 16 words of user area page
alias i R1;
i = 1;
while (i < 16) do
    [[PROCESS_TABLE + 16 + 11]*512 + (512 - 1) + (i - 16)] = -1;
    i = i + 2;
endwhile;

// Initialize disk map table for INIT process
// heap
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 2] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 3] = -1;
// code
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 4] = 7;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 5] = 8;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 6] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 7] = -1;
// stack
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 8] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 9] = -1;

// Setting STATE field of all other processes as TERMINATED
alias stateField R0;
stateField = PROCESS_TABLE + 4 ;
i = 0;
//max 16 processes
while(i<16) do
    if (([stateField+i*16]!=CREATED) && ([stateField+i*16]!=RUNNING) && ([stateField+i*16]!=READY)) then
        [stateField+i*16]=TERMINATED;
    endif;
    i=i+1;
endwhile;

// Setting STATUS field in terminal status table to 0 (indicating terminal free for first process)
[TERMINAL_STATUS_TABLE] = 0;

// Setting STATUS field in disk status table to 0 (indicating disk free for first process)
[DISK_STATUS_TABLE] = 0;

i = 0;
//pages reservered by OS total 128 pages, 512 words per page
while(i <= 82) do
	[MEMORY_FREE_LIST + i] = 1;
	i = i + 1;
endwhile;

//83-126 should be set free
while(i <= 127) do
	[MEMORY_FREE_LIST + i] = 0;
	i = i + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 2] = 45; //memory free count
[SYSTEM_STATUS_TABLE + 3] = 0;

// Return to OS startup code
return;
