/// WRITE Interrupt ///
 breakpoint;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;
alias userSP R0;
userSP = SP;

// Switch the stack from user stack to kernel stack. 
// Save the value of SP in the user SP field of Process Table entry of the process.
// Set the value of SP to beginning of the kernel stack

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
// Setting SP to UArea Page number * 512 - 1
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];
if (fileDescriptor != -2)
then
	 alias physicalAddrRetVal R5;
	 physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	 [physicalAddrRetVal] = -1;
else
	 alias word R5;
	 word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
	 
	// Invoking Terminal Write function
	 multipush(R0, R1, R2, R3,R4,R5);
	 R1 = 3;	 						// function number of Terminal Write
	 R2 = [SYSTEM_STATUS_TABLE + 1]; 	// function number of Terminal Write
	 R3 = word;							// word to be written
	 call MOD_4;						// call Device Manager module
	 multipop(R0,R1,R2,R3,R4,R5);


	 alias physicalAddrRetVal R6;
	 physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
	 [physicalAddrRetVal] = 0;
endif;

SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;