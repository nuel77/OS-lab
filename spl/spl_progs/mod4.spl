///// DEVICE MANAGER MODULE /////

alias functionNum R1;
alias currentPID R2;

// DISK STORE
if(functionNum==1) then //Disk Store function
	alias page_no R3;
	alias block_no R4;

	backup;
		R1=3;
		R2=currentPID;
		call MOD_0;
	restore;

	[DISK_STATUS_TABLE + 1] = 1; //Setting load/store bit to store(1)
	[DISK_STATUS_TABLE + 2] = page_no;
	[DISK_STATUS_TABLE + 3] = block_no;
    
    // store memory page to disk block
	store(page_no,block_no);
	[PROCESS_TABLE + (currentPID*16) + 4] = WAIT_DISK;

	backup;
	call MOD_5;
	restore;

	return;

endif;


// DISK LOAD
if (functionNum == 2) then
	alias page_no R3;
	alias block_no R4;

    // call Acquire Disk (fn no. 3 on resource manager module)
    multipush(R1,R2,R3,R4);
    R1 = 3;
    call MOD_0;
    multipop(R1,R2,R3,R4);

    // Update disk status table
    // load/store
	[DISK_STATUS_TABLE + 1] = 0;
    // pg no.
	[DISK_STATUS_TABLE + 2] = page_no;
    // block no.
	[DISK_STATUS_TABLE + 3] = block_no;

    // load disk block to memory page
    load(page_no,block_no);

    // wait for disk access, call scheduler
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
    multipush(R1,R2,R3,R4);
    call MOD_5;
    multipop(R1,R2,R3,R4);
    return;
endif;


// TERMINAL WRITE
if (functionNum == 3) then
    // Calling 'acquire terminal'
    multipush(R1,R2,R3);
    functionNum = 8; // 'Acquire Terminal' function number within the Resource Manager Module
    currentPID = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    // Ignore the value present in R0 as Acquire Terminal does not have any return value
    multipop(R1,R2,R3);

    // Print
    print R3;

    // Calling 'realease terminal'
    multipush(R1,R2,R3);
    functionNum = 9;     // 'Release Terminal' function number within the Resource Manager Module
    currentPID = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    alias retVal R0;    // the value present in R0 is the return value from 'Release terminal'
    multipop(R1,R3,R3);
    return;
endif;


// TERMINAL READ
if (functionNum == 4) then
    // Calling 'acquire terminal'
    multipush(R1,R2,R3);
    functionNum = 8; // 'Acquire Terminal' function number within the Resource Manager Module
    currentPID = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    // Ignore the value present in R0 as Acquire Terminal does not have any return value
    multipop(R1,R2,R3);

    // read from terminal
    read;

    // change state of current process
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_TERMINAL;

    // invoking Scheduler Module
    multipush(R1,R2,R3);
    call MOD_5;
    multipop(R1,R2,R3);

    // The logical address of the word where the data has to be stored is in R3. Convert this to physical address.
    alias physicalAddress R4;
	physicalAddress = [PTBR + (2*R3)/512]*512 + R3%512;
    // Store the value present in input buffer field of process table to the obtained physical address of the word.
	[physicalAddress] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 8];
    return;
endif;



return;
