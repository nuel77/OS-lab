//save SP in user stack area
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;  
//kernel stack pointer (user page number*512 -1)
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1; 
//saved context of current process to kernel stack.
backup; 
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];
//breakpoint;
alias process_table_entry R1;
//get the address of the process table for current process
process_table_entry = PROCESS_TABLE + (currentPID * 16);
//change status of current process from RUNNING to READY
[process_table_entry + 4] = READY;
//call the scheduler.
call MOD_5;
//restore the context of the newly scheduled process
restore;
//restore the user-stack-pointer of the newly scheduled process
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
//set mode flag =0 (mode flag is -1 if the process is executing in system call ; 0 otherwise)
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
//breakpoint;
ireturn;