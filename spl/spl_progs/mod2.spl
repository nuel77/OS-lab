//// MEMORY MANAGER MODULE ////

alias functionNum R1;


// Get Free Page function
if (functionNum == 1) then
    alias pageNum R2;
    // inc WAIT_MEM_COUNT
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
    // busy loop (wait until there is free memory)
    while([SYSTEM_STATUS_TABLE + 2] == 0) do
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_MEM;
        multipush(R1,R2);
        // call scheduler
        call MOD_5;
        multipop(R1,R2);
    endwhile;
    // dec WAIT_MEM_COUNT
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    // dec MEM_FREE_COUNT since free page will be used by this process
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    
    // loop through entries in memory free list to get first free page
    alias freePageNum R0; //return value in R0
    freePageNum = 0;
    while (freePageNum <= 127) do
        if ([MEMORY_FREE_LIST + freePageNum] == 0) then
            [MEMORY_FREE_LIST + freePageNum] = 1;
             //increment free memory for assisgnment
             if ((128-[SYSTEM_STATUS_TABLE+2])>[75*512+1]) then
                [75*512+1] = 128-[SYSTEM_STATUS_TABLE+2];    
            endif;
            return;
        endif;
        freePageNum = freePageNum+1;
    endwhile;
    return;
endif;

// Release Page function
if (functionNum == 2) then
     alias pageNum R2;
    multipush(R1,R2);
    //decrement  MEMORY_FREE_LIST
    [MEMORY_FREE_LIST + pageNum] = [MEMORY_FREE_LIST + pageNum] - 1;
    if ([MEMORY_FREE_LIST + pageNum] == 0) then
        //inc FREE_PAGE_NUM
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
        alias count R1;
        count = 0;
        // Search for processes in WAIT_MEM state and switch them to READY state
        while(count <= 15) do
            if([PROCESS_TABLE + (count*16) + 4] == WAIT_MEM) then
                [PROCESS_TABLE + (count*16) + 4] = READY; 
            endif;
            count = count + 1;
        endwhile;
    endif;
    multipop(R1,R2);
    return;
endif;


// Release Block, R2 is page num
if (functionNum == 4) then
    [DISK_FREE_LIST + R2] = [DISK_FREE_LIST + R2] - 1;
    return;
endif;

// Get Code Page function
if(functionNum == 5) then
    alias blockNum R2;
    alias i R5;
    alias j R6;
    alias pgNum R7;
    i = 0;
    while(i<16) do
        j = 2;
        while(j<10) do
            // if the block is present in DISK MAP TABLE of any process and the page table entry is valid
            if (([DISK_MAP_TABLE + i*10 + j] == blockNum) && ([[PROCESS_TABLE + i*16 + 14]+(2*j+1)] != "0000")) then
                pgNum = [PAGE_TABLE_BASE + i*20 + j*2];
                [MEMORY_FREE_LIST + pgNum] = [MEMORY_FREE_LIST + pgNum]+1;
                R0 = pgNum;
                return;
            endif;
            j = j + 1;
        endwhile;
        i = i + 1;
    endwhile;
    
    if(i == 16) then
        // get free page
        multipush(R1,R2,R3);
        R1 = 1;
        call MOD_2;
        multipop(R1,R2,R3);

        // load disk
        multipush(R0,R1,R2,R3);
        R1 = 2;
        R4 = blockNum;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = R0;
        call MOD_4;
        multipop(R0,R1,R2,R3);
        // return page no. (given by R0)
    endif;
    breakpoint;
    return;
endif;
